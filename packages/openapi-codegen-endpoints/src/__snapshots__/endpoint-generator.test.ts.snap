// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateEndpointDefinitions > enspoints 1`] = `
[
  "export interface EndpointDefinition<
    DeserializedResponse extends EndpointDefinition.DeserializedResponsesObject,
    DeserializedRequest extends EndpointDefinition.DeserializedRequestObject,
    Params extends EndpointDefinition.Parameters | undefined
> {
    path: EndpointDefinition.Path;
    /** operation id */
    name: string;
    operation: EndpointDefinition.Operation;
    parameters?: Params;
    response: EndpointDefinition.Response<DeserializedResponse>;
    request?: EndpointDefinition.Request<DeserializedRequest>;
}

export module EndpointDefinition {
    type PathSegment = \`\${string}\`;

    type PathParam = \`{:\${string}}\`;

    /** @example '/pets', '/pets/{:petId}' , '/pets/{:petId}/inner-resources' */
    export type Path = \`/\${PathSegment}\` | \`/\${PathSegment}/\${PathSegment | PathParam}\`;

    type DtoTypes = object | string | number | undefined;

    export type DeserializedResponsesObject = { [status: number]: DtoTypes };

    export type Operation = "get" | "post" | "put" | "delete" | "patch";

    export type Parameters = {
        path?: { [name: string]: DtoTypes };
        query?: { [name: string]: DtoTypes };
        header?: { [headerKey: string]: DtoTypes };
        cookie?: { [cookieKey: string]: DtoTypes };
    };
    export type DeserializedRequestObject = DtoTypes;

    export interface Request<DeserializedRequest = DeserializedRequestObject> {
        /** meta information */
        format?: string;
        /** deserialize payload */
        payload: DeserializedRequest;
        /** transform dto to model object */
        transform?: <Model, Dto extends DeserializedRequest>(payload: Dto) => Model | undefined;
        deserialize?: (payload: string | number | undefined) => DeserializedRequest;
    }

    export type Response<DeserializedResponse = DeserializedResponsesObject> = {
        [status in keyof DeserializedResponse]: {
            /** meta information */
            format?: string;
            /** deserialize payload */
            payload: DeserializedResponse[status];
            /** transform model object to dto */
            transform?: <Model>(model: Model) => DeserializedResponse[status];
        };
    };
}
",
  "export interface EndpointDefinition<
    DeserializedResponse extends EndpointDefinition.DeserializedResponsesObject,
    DeserializedRequest extends EndpointDefinition.DeserializedRequestObject,
    Params extends EndpointDefinition.Parameters | undefined
> {
    path: EndpointDefinition.Path;
    /** operation id */
    name: string;
    operation: EndpointDefinition.Operation;
    parameters?: Params;
    response: EndpointDefinition.Response<DeserializedResponse>;
    request?: EndpointDefinition.Request<DeserializedRequest>;
}

export module EndpointDefinition {
    type PathSegment = \`\${string}\`;

    type PathParam = \`{:\${string}}\`;

    /** @example '/pets', '/pets/{:petId}' , '/pets/{:petId}/inner-resources' */
    export type Path = \`/\${PathSegment}\` | \`/\${PathSegment}/\${PathSegment | PathParam}\`;

    type DtoTypes = object | string | number | undefined;

    export type DeserializedResponsesObject = { [status: number]: DtoTypes };

    export type Operation = "get" | "post" | "put" | "delete" | "patch";

    export type Parameters = {
        path?: { [name: string]: DtoTypes };
        query?: { [name: string]: DtoTypes };
        header?: { [headerKey: string]: DtoTypes };
        cookie?: { [cookieKey: string]: DtoTypes };
    };
    export type DeserializedRequestObject = DtoTypes;

    export interface Request<DeserializedRequest = DeserializedRequestObject> {
        /** meta information */
        format?: string;
        /** deserialize payload */
        payload: DeserializedRequest;
        /** transform dto to model object */
        transform?: <Model, Dto extends DeserializedRequest>(payload: Dto) => Model | undefined;
        deserialize?: (payload: string | number | undefined) => DeserializedRequest;
    }

    export type Response<DeserializedResponse = DeserializedResponsesObject> = {
        [status in keyof DeserializedResponse]: {
            /** meta information */
            format?: string;
            /** deserialize payload */
            payload: DeserializedResponse[status];
            /** transform model object to dto */
            transform?: <Model>(model: Model) => DeserializedResponse[status];
        };
    };
}
",
  "import { EndpointDefinition } from './EndpointDefinition'
export module TestApiEndpoints {
    export type Path = "/pets/{:petId}" | "/pets"
    export interface OperationToPath {
        getPet: "/pets/{:petId}";
        updatePet: "/pets/{:petId}";
        createPet: "/pets";
    }
    export interface GetPet<ErrorSchema extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        { "401": ErrorSchema },
        undefined,
        { "path": { "petId": string }, "query": undefined, "header": undefined, "cookie": undefined }
    > {
        name: "getPet";
        operation: "get";
        path: "/pets/{:petId}"
    }

    export interface UpdatePet<ResponseSchema extends EndpointDefinition.DtoTypes, RequestSchema extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        { "200": ResponseSchema },
        RequestSchema,
        { "path": undefined, "query": { "secret": string }, "header": undefined, "cookie": undefined }
    > {
        name: "updatePet";
        operation: "put";
        path: "/pets/{:petId}"
    }

    export interface CreatePet<RequestSchema extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        { "200": undefined },
        RequestSchema,
        { "path": undefined, "query": undefined, "header": { "other-secret": string }, "cookie": { "secret": string } }
    > {
        name: "createPet";
        operation: "post";
        path: "/pets"
    }

}
",
]
`;

exports[`generateEndpointDefinitions > integration > pets-modular-complex/petstore-api.yml 1`] = `
[
  "export interface EndpointDefinition<
    DeserializedResponse extends EndpointDefinition.DeserializedResponsesObject,
    DeserializedRequest extends EndpointDefinition.DeserializedRequestObject,
    Params extends EndpointDefinition.Parameters | undefined
> {
    path: EndpointDefinition.Path;
    /** operation id */
    name: string;
    operation: EndpointDefinition.Operation;
    parameters?: Params;
    response: EndpointDefinition.Response<DeserializedResponse>;
    request?: EndpointDefinition.Request<DeserializedRequest>;
}

export module EndpointDefinition {
    type PathSegment = \`\${string}\`;

    type PathParam = \`{:\${string}}\`;

    /** @example '/pets', '/pets/{:petId}' , '/pets/{:petId}/inner-resources' */
    export type Path = \`/\${PathSegment}\` | \`/\${PathSegment}/\${PathSegment | PathParam}\`;

    type DtoTypes = object | string | number | undefined;

    export type DeserializedResponsesObject = { [status: number]: DtoTypes };

    export type Operation = "get" | "post" | "put" | "delete" | "patch";

    export type Parameters = {
        path?: { [name: string]: DtoTypes };
        query?: { [name: string]: DtoTypes };
        header?: { [headerKey: string]: DtoTypes };
        cookie?: { [cookieKey: string]: DtoTypes };
    };
    export type DeserializedRequestObject = DtoTypes;

    export interface Request<DeserializedRequest = DeserializedRequestObject> {
        /** meta information */
        format?: string;
        /** deserialize payload */
        payload: DeserializedRequest;
        /** transform dto to model object */
        transform?: <Model, Dto extends DeserializedRequest>(payload: Dto) => Model | undefined;
        deserialize?: (payload: string | number | undefined) => DeserializedRequest;
    }

    export type Response<DeserializedResponse = DeserializedResponsesObject> = {
        [status in keyof DeserializedResponse]: {
            /** meta information */
            format?: string;
            /** deserialize payload */
            payload: DeserializedResponse[status];
            /** transform model object to dto */
            transform?: <Model>(model: Model) => DeserializedResponse[status];
        };
    };
}
",
  "export interface EndpointDefinition<
    DeserializedResponse extends EndpointDefinition.DeserializedResponsesObject,
    DeserializedRequest extends EndpointDefinition.DeserializedRequestObject,
    Params extends EndpointDefinition.Parameters | undefined
> {
    path: EndpointDefinition.Path;
    /** operation id */
    name: string;
    operation: EndpointDefinition.Operation;
    parameters?: Params;
    response: EndpointDefinition.Response<DeserializedResponse>;
    request?: EndpointDefinition.Request<DeserializedRequest>;
}

export module EndpointDefinition {
    type PathSegment = \`\${string}\`;

    type PathParam = \`{:\${string}}\`;

    /** @example '/pets', '/pets/{:petId}' , '/pets/{:petId}/inner-resources' */
    export type Path = \`/\${PathSegment}\` | \`/\${PathSegment}/\${PathSegment | PathParam}\`;

    type DtoTypes = object | string | number | undefined;

    export type DeserializedResponsesObject = { [status: number]: DtoTypes };

    export type Operation = "get" | "post" | "put" | "delete" | "patch";

    export type Parameters = {
        path?: { [name: string]: DtoTypes };
        query?: { [name: string]: DtoTypes };
        header?: { [headerKey: string]: DtoTypes };
        cookie?: { [cookieKey: string]: DtoTypes };
    };
    export type DeserializedRequestObject = DtoTypes;

    export interface Request<DeserializedRequest = DeserializedRequestObject> {
        /** meta information */
        format?: string;
        /** deserialize payload */
        payload: DeserializedRequest;
        /** transform dto to model object */
        transform?: <Model, Dto extends DeserializedRequest>(payload: Dto) => Model | undefined;
        deserialize?: (payload: string | number | undefined) => DeserializedRequest;
    }

    export type Response<DeserializedResponse = DeserializedResponsesObject> = {
        [status in keyof DeserializedResponse]: {
            /** meta information */
            format?: string;
            /** deserialize payload */
            payload: DeserializedResponse[status];
            /** transform model object to dto */
            transform?: <Model>(model: Model) => DeserializedResponse[status];
        };
    };
}
",
  "import { EndpointDefinition } from './EndpointDefinition'
export module TestApiEndpoints {
    export type Path = "/pets" | "/pets/{petId}"
    export interface OperationToPath {
        listPets: "/pets";
        createPets: "/pets";
        showPetById: "/pets/{petId}";
        patchPet: "/pets/{petId}";
    }
    export interface ListPets<Array<Pet> extends EndpointDefinition.DtoTypes > extends EndpointDefinition <
        { "200": Array<Pet> },
        undefined,
        { "path": { "petId": string }, "query": undefined, "header": undefined, "cookie": undefined }
        > {
            name: "listPets";
            operation: "get";
            path: "/pets"
        }

    export interface CreatePets<Pet extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        {},
        Pet,
        { "path": undefined, "query": undefined, "header": undefined, "cookie": undefined }
    > {
        name: "createPets";
        operation: "post";
        path: "/pets"
    }

    export interface ShowPetById<Pet extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        { "200": Pet },
        undefined,
        { "path": { "petId": string }, "query": undefined, "header": undefined, "cookie": undefined }
    > {
        name: "showPetById";
        operation: "get";
        path: "/pets/{petId}"
    }

    export interface PatchPet<Pet extends EndpointDefinition.DtoTypes, Pet extends EndpointDefinition.DtoTypes> extends EndpointDefinition<
        { "200": Pet },
        Pet,
        { "path": { "petId": string }, "query": undefined, "header": undefined, "cookie": undefined }
    > {
        name: "patchPet";
        operation: "patch";
        path: "/pets/{petId}"
    }

}
",
]
`;
